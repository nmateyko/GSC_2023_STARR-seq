import pathlib

pathlib.Path('job_logs/').mkdir(exist_ok=True)

configfile: "pipeline_config.yaml"

def get_input_fastqs(wildcards):
    if wildcards.sample == "test":
        return ["test/test_r1_2023_05_08_16_41.fastq.gz", "test/test_r2_2023_05_08_16_41.fastq.gz"]

    else:
        sample_suffix = config["samples"][wildcards.sample]
        data_dir = "/arc/project/st-cdeboer-1/GSC-seq/2023-05-03_STARR_Seq/IX11516/HG25JDSX5_1"
        return [f"{data_dir}/HG25JDSX5_1_1_{sample_suffix}", f"{data_dir}/HG25JDSX5_1_2_{sample_suffix}"]

def get_umi_params(wildcards):
    if "RNA" in wildcards.sample:
        return "--umi --umi-threshold 1 --umi-start 17 --umi-len 8"
    else:
        return ""

def get_cluster_threads(wildcards):
    if "RNA" in wildcards.sample:
        return 8
    else:
        return 4

def get_cluster_mem(wildcards):
    if "RNA" in wildcards.sample:
        return 38400
    else:
        return 19200

def get_count_threads(wildcards):
    if "RNA" in wildcards.sample:
        return 8
    else:
        return 2

def get_count_mem(wildcards):
    if "RNA" in wildcards.sample:
        return 38400
    else:
        return 9600


rule all:
    input:
        expand("output/counts/{sample}_counts.txt", sample=config["samples"]),
        expand("output/qc/{sample}", sample=config["samples"])


rule fastqc:
    input:
        get_input_fastqs
    output:
        directory("output/qc/{sample}")
    log:
        "output/logs/fastqc/{sample}.log",
    conda:
        "environment.yaml"
    threads: 1
    resources:
        mem_mb=4800,
        walltime="00:20:00"
    shell:
        "mkdir {output} ; fastqc {input} -t {threads} -o {output} --noextract 2> {log}"


rule cutadapt_trim_PE:
    input:
        get_input_fastqs
    output: 
        r1="output/trimmed/{sample}_1.fastq",
        r2="output/trimmed/{sample}_2.fastq"
    log:
        summary="output/logs/cutadapt/{sample}_cutadapt.log",
        untrimmed_1="output/logs/cutadapt/{sample}_untrimmed_1.fastq.gz",
        untrimmed_2="output/logs/cutadapt/{sample}_untrimmed_2.fastq.gz",
        short_1="output/logs/cutadapt/{sample}_short_1.fastq.gz",
        short_2="output/logs/cutadapt/{sample}_short_2.fastq.gz",
        long_1="output/logs/cutadapt/{sample}_long_1.fastq.gz",
        long_2="output/logs/cutadapt/{sample}_long_2.fastq.gz",
    conda:
        "environment.yaml"
    params:
        a1="AGATCGGAAGAGCACACGTCTGAACTCCAGTCAC",
        a2="AGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGT",
        min_len=83,
        max_len=133,
        overlap=10
    threads: 4
    resources:
        mem_mb=19200,
        walltime="01:00:00"
    shell:
        "cutadapt -j {threads} --overlap {params.overlap} --untrimmed-o {log.untrimmed_1} --untrimmed-p {log.untrimmed_2} "
        "-m {params.min_len} --too-short-o {log.short_1} --too-short-p {log.short_2} "
        "-M {params.max_len} --too-long-o {log.long_1} --too-long-p {log.long_2} "
        "-a {params.a1} -A {params.a2} -o {output.r1} -p {output.r2} {input} > {log.summary}"


rule pair:
    input:
        r1="output/trimmed/{sample}_1.fastq",
        r2="output/trimmed/{sample}_2.fastq",
        script="scripts/pair_reads.py"
    output: 
        output="output/paired/{sample}_assembled.fastq"
    log:
        "output/logs/pair/{sample}_unpaired.log"
    conda:
        "environment.yaml"
    threads: 4
    resources:
        mem_mb=19200,
        walltime="01:00:00"
    shell:
        "python {input.script} --r1 {input.r1} --r2 {input.r2} --out {output} --log {log} -t {threads} --output-fastq"
        

rule cluster:
    input:
        "output/paired/{sample}_assembled.fastq"
    output:
        "output/clustered/{sample}_clustered.txt"
    log:
        "output/logs/starcode/{sample}_starcode.log"
    conda:
        "environment.yaml"
    params:
        length=30,
        distance=3
    threads: get_cluster_threads
    resources:
        mem_mb=get_cluster_mem,
        walltime="01:00:00"
    shell:
        "cut -c-{params.length} {input} | starcode -o {output} -t {threads} -d {params.distance} --seq-id -c 2> {log}"


rule count:
    input:
        fq="output/paired/{sample}_assembled.fastq",
        clustered="output/clustered/{sample}_clustered.txt",
        script="scripts/get_cluster_counts.py"
    output:
        "output/counts/{sample}_counts.txt"
    log:
        "output/logs/count/{sample}.log"
    conda:
        "environment.yaml"
    params:
        distance=20,
        umi_params=get_umi_params
    threads: get_count_threads
    resources:
        mem_mb=get_count_mem,
        walltime="01:00:00"
    shell:
        "python {input.script} -f {input.fq} -c {input.clustered} -o {output} -l {log} -d {params.distance} -t {threads} {params.umi_params}"